devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
heal(rweCut())
help(rweCut)
source('~/AugRCT/R/rwe_functions.R')
devtools::document()
devtools::document()
library(AugRCT)
devtools::document()
library(AugRCT)
devtools::document()
devtools::document()
library(AugRCT)
browseVignettes()
usethis::use_vignette("AugRCT-vignette")
library(AugRCT)
root.path <- "C:\\Users\\wangxi8\\Documents\\AugRCT"
code.path <- paste0(root.path,"R\\")
#load Stan models
options(mc.cores=parallel::detectCores()) #In HPC server, DO NOT run this line of code
rstan_options(auto_write = TRUE) #tell stan not to compile code that has already been compiled
path <- paste0(root.path,"stan\\")
# Matching + Fixed power prior. Bayes model 1. logit(theta) =beta0 + lambda*Z
model.1 <- stan_model(paste0(path, "model1.stan"))
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2_new.stan"))
# Stratification + random Power Prior
model.3 <- stan_model(paste0(path, "model3.stan"))
# Stratification + fixed Power Prior
model.3fix <- stan_model(paste0(path, "model3fix.stan"))
# Matching + Commensurate prior
model.4 <- stan_model(paste0(path, "model4_new.stan"))
# PS stratification + Commensurate prior
model.5 <- stan_model(paste0(path, "model5_new.stan"))
# IPTW + Commensurate prior
model.6 <- stan_model(paste0(path, "model6_new.stan"))
devtools::document()
library(AugRCT)
devtools::document()
library(AugRCT)
root.path <- "C:\\Users\\wangxi8\\Documents\\AugRCT"
code.path <- paste0(root.path,"R\\")
#load Stan models
options(mc.cores=parallel::detectCores()) #In HPC server, DO NOT run this line of code
rstan_options(auto_write = TRUE) #tell stan not to compile code that has already been compiled
path <- paste0(root.path,"stan\\")
# Matching + Fixed power prior. Bayes model 1. logit(theta) =beta0 + lambda*Z
model.1 <- stan_model(paste0(path, "model1.stan"))
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2_new.stan"))
# Stratification + random Power Prior
model.3 <- stan_model(paste0(path, "model3.stan"))
# Stratification + fixed Power Prior
model.3fix <- stan_model(paste0(path, "model3fix.stan"))
# Matching + Commensurate prior
model.4 <- stan_model(paste0(path, "model4_new.stan"))
# PS stratification + Commensurate prior
model.5 <- stan_model(paste0(path, "model5_new.stan"))
# IPTW + Commensurate prior
model.6 <- stan_model(paste0(path, "model6_new.stan"))
library(AugRCT)
root.path <- "C:\\Users\\wangxi8\\Documents\\AugRCT"
code.path <- paste0(root.path,"R\\")
options(mc.cores=parallel::detectCores()) #In HPC server, DO NOT run this line of code
rstan_options(auto_write = TRUE)
path <- paste0(root.path,"stan\\")
# Matching + Fixed power prior. Bayes model 1. logit(theta) =beta0 + lambda*Z
model.1 <- stan_model(paste0(path, "model1.stan"))
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2_new.stan"))
# Stratification + random Power Prior
model.3 <- stan_model(paste0(path, "model3.stan"))
# Stratification + fixed Power Prior
model.3fix <- stan_model(paste0(path, "model3fix.stan"))
# Matching + Commensurate prior
model.4 <- stan_model(paste0(path, "model4_new.stan"))
# PS stratification + Commensurate prior
model.5 <- stan_model(paste0(path, "model5_new.stan"))
# IPTW + Commensurate prior
model.6 <- stan_model(paste0(path, "model6_new.stan"))
root.path <- "C:\\Users\\wangxi8\\Documents\\AugRCT\\"
code.path <- paste0(root.path,"R\\")
#load Stan models
options(mc.cores=parallel::detectCores()) #In HPC server, DO NOT run this line of code
rstan_options(auto_write = TRUE) #tell stan not to compile code that has already been compiled
path <- paste0(root.path,"stan\\")
# Matching + Fixed power prior. Bayes model 1. logit(theta) =beta0 + lambda*Z
model.1 <- stan_model(paste0(path, "model1.stan"))
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2_new.stan"))
# Stratification + random Power Prior
model.3 <- stan_model(paste0(path, "model3.stan"))
# Stratification + fixed Power Prior
model.3fix <- stan_model(paste0(path, "model3fix.stan"))
# Matching + Commensurate prior
model.4 <- stan_model(paste0(path, "model4_new.stan"))
# PS stratification + Commensurate prior
model.5 <- stan_model(paste0(path, "model5_new.stan"))
# IPTW + Commensurate prior
model.6 <- stan_model(paste0(path, "model6_new.stan"))
knitr::opts_chunk$set(echo = TRUE)
library(AugRCT)
dt <- data.frame(read_csv(paste0(root.path, "\\Real data application\\analy_rct_external_ctrl_orr_23July2020.csv")))
library(readr)
dt <- data.frame(read_csv(paste0(root.path, "\\Real data application\\analy_rct_external_ctrl_orr_23July2020.csv")))
contVars <- c("AGE", "WEIGHTBL", "BASETMR") #"PDL1TPS",
binVars <- c("Male","White", "PRAD_ind","EastAsia","PDL1TPS_50", "BSECOG", "CARBOPLATIN","Smoker")
vars.all <- c(binVars,contVars)
dt <- dt %>% dplyr::mutate(group=ifelse(datasource=="RCT" & trt=="Test", "E",
ifelse(datasource=="RCT" & trt=="Control", "CD",
ifelse(datasource=="Historical" & trt=="Control", "CH",NA))),
D=1*(datasource=="RCT"),
Z=1*(trt=="Test"),
Male=1*(SEX=="M"),
White=ifelse(is.na(RACE), NA, ifelse(RACE=="WHITE", 1,0)),
PRAD_ind=1*(PRAD=="Yes"),
EastAsia=1*(REGEA=="East Asia"),
PDL1TPS_50=1*(PDL1TPS>=50),
PDL1TPS_1=1*(PDL1TPS>=1),
STRATUMI=ifelse(is.na(STRATUMI),"CARBOPLATIN" ,STRATUMI),
Smoker=1*(SMOKER %in% c("Current","Former"))) %>%
dplyr::select(-RACE,-datasource, -trt)
library(stringr)
dt$CARBOPLATIN <- 1* (str_detect(dt$STRATUMI, "CARBOPLATIN"))
# check missing
miss.pattern <- data.frame(md.pattern(dt,plot=FALSE)[,18:21])
library(mice) #impute missing
miss.pattern <- data.frame(md.pattern(dt,plot=FALSE)[,18:21])
miss.pattern$N <- c(rownames(miss.pattern)[-7],sum(as.numeric(rownames(miss.pattern)), na.rm = T))
rownames(miss.pattern) <- c(paste0("Pattern ",c(1:6)),"Total")
kableone(miss.pattern)
library(tableone)
miss.pattern <- data.frame(md.pattern(dt,plot=FALSE)[,18:21])
miss.pattern$N <- c(rownames(miss.pattern)[-7],sum(as.numeric(rownames(miss.pattern)), na.rm = T))
rownames(miss.pattern) <- c(paste0("Pattern ",c(1:6)),"Total")
kableone(miss.pattern)
# impute missing
# in outcome as non-responders (i.e. $Y=0$)
dt <- dt %>% dplyr::mutate(response=ifelse(is.na(response),0,response))
complete.dt <- NULL
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
for (i in c("E","CD","CH")){
dt.temp <- dt %>% dplyr::filter(group==i)
#impute with median (WEIGHTBL BASETMR)
med.WEIGHTBL=median(dt.temp$WEIGHTBL,na.rm = T);med.BASETMR=median(dt.temp$BASETMR,na.rm = T)
#impute with mode (BSECOG White)
mode.BSECOG=Mode(dt.temp$BSECOG);mode.White=Mode(dt.temp$White)
dt.temp <- dt.temp %>% dplyr::mutate(White=ifelse(is.na(White),mode.White,White),BSECOG=ifelse(is.na(BSECOG),mode.BSECOG,BSECOG),
WEIGHTBL=ifelse(is.na(WEIGHTBL),med.WEIGHTBL,WEIGHTBL),
BASETMR=ifelse(is.na(BASETMR),med.BASETMR,BASETMR))
complete.dt <- rbind(complete.dt,dt.temp)
}
complete.dt$group <- factor(complete.dt$group)
dt <- data.frame(read_csv(paste0(root.path, "\\Real data application\\analy_rct_external_ctrl_orr_23July2020.csv")))
contVars <- c("AGE", "WEIGHTBL", "BASETMR") #"PDL1TPS",
binVars <- c("Male","White", "PRAD_ind","EastAsia","PDL1TPS_50", "BSECOG", "CARBOPLATIN","Smoker")
vars.all <- c(binVars,contVars)
dt <- dt %>% dplyr::mutate(group=ifelse(datasource=="RCT" & trt=="Test", "E",
ifelse(datasource=="RCT" & trt=="Control", "CD",
ifelse(datasource=="Historical" & trt=="Control", "CH",NA))),
D=1*(datasource=="RCT"),
Z=1*(trt=="Test"),
Male=1*(SEX=="M"),
White=ifelse(is.na(RACE), NA, ifelse(RACE=="WHITE", 1,0)),
PRAD_ind=1*(PRAD=="Yes"),
EastAsia=1*(REGEA=="East Asia"),
PDL1TPS_50=1*(PDL1TPS>=50),
PDL1TPS_1=1*(PDL1TPS>=1),
STRATUMI=ifelse(is.na(STRATUMI),"CARBOPLATIN" ,STRATUMI),
Smoker=1*(SMOKER %in% c("Current","Former"))) %>%
dplyr::select(-RACE,-datasource, -trt)
library(stringr)
dt$CARBOPLATIN <- 1* (str_detect(dt$STRATUMI, "CARBOPLATIN"))
miss.pattern <- data.frame(md.pattern(dt,plot=FALSE)[,18:21])
miss.pattern$N <- c(rownames(miss.pattern)[-7],sum(as.numeric(rownames(miss.pattern)), na.rm = T))
rownames(miss.pattern) <- c(paste0("Pattern ",c(1:6)),"Total")
kableone(miss.pattern)
# impute missing
# in outcome as non-responders (i.e. $Y=0$)
dt <- dt %>% dplyr::mutate(response=ifelse(is.na(response),0,response))
complete.dt <- NULL
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
for (i in c("E","CD","CH")){
dt.temp <- dt %>% dplyr::filter(group==i)
#impute with median (WEIGHTBL BASETMR)
med.WEIGHTBL=median(dt.temp$WEIGHTBL,na.rm = T);med.BASETMR=median(dt.temp$BASETMR,na.rm = T)
#impute with mode (BSECOG White)
mode.BSECOG=Mode(dt.temp$BSECOG);mode.White=Mode(dt.temp$White)
dt.temp <- dt.temp %>% dplyr::mutate(White=ifelse(is.na(White),mode.White,White),BSECOG=ifelse(is.na(BSECOG),mode.BSECOG,BSECOG),
WEIGHTBL=ifelse(is.na(WEIGHTBL),med.WEIGHTBL,WEIGHTBL),
BASETMR=ifelse(is.na(BASETMR),med.BASETMR,BASETMR))
complete.dt <- rbind(complete.dt,dt.temp)
}
complete.dt$group <- factor(complete.dt$group)
table <- CreateTableOne(vars = c(vars.all),data = complete.dt, strata="group",factorVars = c(binVars))
kableone(table, nonnormal=contVars)
save(complete.dt, file=paste0(root.path, "\\Real data application\\complete_realdata.RData"))
library(AugRCT)
complete.dt,
library(AugRCT)
library(kableone)
library(tableone)
head(complete.dt)
load(file=paste0(root.path, "\\Real data application\\complete_realdata.RData"))
ps.covs=c("Smoker","AGE", "WEIGHTBL", "BASETMR","Male", "PRAD_ind","White","PDL1TPS_50", "BSECOG")
kableone(head(complete.dt[,c("Y","Z","D","group",ps.covs)]))
colnames(complete.dt)
dt <- dt %>% dplyr::mutate(response=ifelse(is.na(response),0,response))
complete.dt <- NULL
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
for (i in c("E","CD","CH")){
dt.temp <- dt %>% dplyr::filter(group==i)
#impute with median (WEIGHTBL BASETMR)
med.WEIGHTBL=median(dt.temp$WEIGHTBL,na.rm = T);med.BASETMR=median(dt.temp$BASETMR,na.rm = T)
#impute with mode (BSECOG White)
mode.BSECOG=Mode(dt.temp$BSECOG);mode.White=Mode(dt.temp$White)
dt.temp <- dt.temp %>% dplyr::mutate(White=ifelse(is.na(White),mode.White,White),BSECOG=ifelse(is.na(BSECOG),mode.BSECOG,BSECOG),
WEIGHTBL=ifelse(is.na(WEIGHTBL),med.WEIGHTBL,WEIGHTBL),
BASETMR=ifelse(is.na(BASETMR),med.BASETMR,BASETMR))
complete.dt <- rbind(complete.dt,dt.temp)
}
complete.dt$group <- factor(complete.dt$group)
complete.dt$Y <- complete.dt$response
save(complete.dt, file=paste0(root.path, "\\Real data application\\complete_realdata.RData"))
load(file=paste0(root.path, "\\Real data application\\complete_realdata.RData"))
ps.covs=c("Smoker","AGE", "WEIGHTBL", "BASETMR","Male", "PRAD_ind","White","PDL1TPS_50", "BSECOG")
kableone(head(complete.dt[,c("Y","Z","D","group",ps.covs)]))
# path of the package
root.path <- "C:\\Users\\wangxi8\\Documents\\AugRCT\\"
code.path <- paste0(root.path,"R\\")
#load Stan models
options(mc.cores=parallel::detectCores()) #In HPC server, DO NOT run this line of code
rstan_options(auto_write = TRUE) #tell stan not to compile code that has already been compiled
path <- paste0(root.path,"stan\\")
# Matching + Fixed power prior. Bayes model 1. logit(theta) =beta0 + lambda*Z
model.1 <- stan_model(paste0(path, "model1.stan"))
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2_new.stan"))
# Stratification + random Power Prior
model.3 <- stan_model(paste0(path, "model3.stan"))
# Stratification + fixed Power Prior
model.3fix <- stan_model(paste0(path, "model3fix.stan"))
# Matching + Commensurate prior
model.4 <- stan_model(paste0(path, "model4_new.stan"))
# PS stratification + Commensurate prior
model.5 <- stan_model(paste0(path, "model5_new.stan"))
# IPTW + Commensurate prior
model.6 <- stan_model(paste0(path, "model6_new.stan"))
data.list <- list(mydata, mydata.White1, mydata.CARBOPLATIN1)
comp.tmp <- RealData.Hybrid(mydata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = 5)$comp
comp.freq.tmp <- aRealData.Freq(mydata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = nstratas[i])$comp.freq
comps1 <- comp.tmp %>% dplyr::mutate(point.est = mean, lower.CI = X2.5., upper.CI = X97.5.,label = fit) %>%
dplyr::select(point.est,lower.CI,upper.CI,label)
comp.all <- rbind(comps1, comp.freq.tmp) %>% dplyr::mutate_if(is.numeric, round, 3) %>%
arrange(label) %>% dplyr::mutate(CI.width = upper.CI - lower.CI)
rownames(comp.all)=c(1:nrow(comp.all))
comp.all <- comp.all %>% dplyr::mutate(relative.CI.width = CI.width/CI.width[comp.all$label=="No borrowing"])
comp.tmp <- RealData.Hybrid(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = 5)$comp
comp.freq.tmp <- aRealData.Freq(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = nstratas[i])$comp.freq
comps1 <- comp.tmp %>% dplyr::mutate(point.est = mean, lower.CI = X2.5., upper.CI = X97.5.,label = fit) %>%
dplyr::select(point.est,lower.CI,upper.CI,label)
comp.all <- rbind(comps1, comp.freq.tmp) %>% dplyr::mutate_if(is.numeric, round, 3) %>%
arrange(label) %>% dplyr::mutate(CI.width = upper.CI - lower.CI)
rownames(comp.all)=c(1:nrow(comp.all))
comp.all <- comp.all %>% dplyr::mutate(relative.CI.width = CI.width/CI.width[comp.all$label=="No borrowing"])
comp.tmp <- RealData.Hybrid(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = 5)$comp
library(AugRCT)
library(AugRCT)
comp.tmp <- RealData.Hybrid(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = 5)$comp
head(complete.dt)
knitr::opts_chunk$set(echo = TRUE)
# impute missing
# in outcome as non-responders (i.e. $Y=0$)
dt <- dt %>% dplyr::mutate(response=ifelse(is.na(response),0,response))
complete.dt <- NULL
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
for (i in c("E","CD","CH")){
dt.temp <- dt %>% dplyr::filter(group==i)
#impute with median (WEIGHTBL BASETMR)
med.WEIGHTBL=median(dt.temp$WEIGHTBL,na.rm = T);med.BASETMR=median(dt.temp$BASETMR,na.rm = T)
#impute with mode (BSECOG White)
mode.BSECOG=Mode(dt.temp$BSECOG);mode.White=Mode(dt.temp$White)
dt.temp <- dt.temp %>% dplyr::mutate(White=ifelse(is.na(White),mode.White,White),BSECOG=ifelse(is.na(BSECOG),mode.BSECOG,BSECOG),
WEIGHTBL=ifelse(is.na(WEIGHTBL),med.WEIGHTBL,WEIGHTBL),
BASETMR=ifelse(is.na(BASETMR),med.BASETMR,BASETMR))
complete.dt <- rbind(complete.dt,dt.temp)
}
complete.dt$group <- factor(complete.dt$group)
complete.dt$Y <- complete.dt$response
complete.dt$CH.ind <- complete.dt$group=="CH"
save(complete.dt, file=paste0(root.path, "\\Real data application\\complete_realdata.RData"))
library(AugRCT)
library(tableone)
load(file=paste0(root.path, "\\Real data application\\complete_realdata.RData"))
comp.tmp <- RealData.Hybrid(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = 5)$comp
comp.freq.tmp <- aRealData.Freq(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = nstratas[i])$comp.freq
comps1 <- comp.tmp %>% dplyr::mutate(point.est = mean, lower.CI = X2.5., upper.CI = X97.5.,label = fit) %>%
dplyr::select(point.est,lower.CI,upper.CI,label)
comp.all <- rbind(comps1, comp.freq.tmp) %>% dplyr::mutate_if(is.numeric, round, 3) %>%
arrange(label) %>% dplyr::mutate(CI.width = upper.CI - lower.CI)
rownames(comp.all)=c(1:nrow(comp.all))
comp.all <- comp.all %>% dplyr::mutate(relative.CI.width = CI.width/CI.width[comp.all$label=="No borrowing"])
devtools::document()
library(AugRCT)
library(AugRCT)
library(tableone)
root.path <- "C:\\Users\\wangxi8\\Documents\\AugRCT\\"
comp.freq.tmp <- RealData.Freq(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = nstratas[i])$comp.freq
comp.freq.tmp <- RealData.Freq(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = 5)$comp.freq
comp.freq.tmp
browseVignettes()
library(AugRCT)
library(AugRCT)
library(AugRCT)
root.path <- "C:\\Users\\wangxi8\\Documents\\AugRCT\\"
load(file=paste0(root.path, "\\Real data application\\complete_realdata.RData"))
ps.covs=c("Smoker","AGE", "WEIGHTBL", "BASETMR","Male", "PRAD_ind","White","PDL1TPS_50", "BSECOG")
# path of the package
code.path <- paste0(root.path,"R\\")
#load Stan models
options(mc.cores=parallel::detectCores()) #In HPC server, DO NOT run this line of code
rstan_options(auto_write = TRUE) #tell stan not to compile code that has already been compiled
path <- paste0(root.path,"stan\\")
# Matching + Fixed power prior. Bayes model 1. logit(theta) =beta0 + lambda*Z
model.1 <- stan_model(paste0(path, "model1.stan"))
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2_new.stan"))
# Stratification + random Power Prior
model.3 <- stan_model(paste0(path, "model3.stan"))
# Stratification + fixed Power Prior
model.3fix <- stan_model(paste0(path, "model3fix.stan"))
# Matching + Commensurate prior
model.4 <- stan_model(paste0(path, "model4_new.stan"))
# PS stratification + Commensurate prior
model.5 <- stan_model(paste0(path, "model5_new.stan"))
# IPTW + Commensurate prior
model.6 <- stan_model(paste0(path, "model6_new.stan"))
comp.tmp <- RealData.Hybrid(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = 5)$comp
comp.freq.tmp <- RealData.Freq(realdata=complete.dt, ps.covs=ps.covs,
trt="D",nstrata = 5)$comp.freq
comps1 <- comp.tmp %>% dplyr::mutate(point.est = mean, lower.CI = X2.5., upper.CI = X97.5.,label = fit) %>%
dplyr::select(point.est,lower.CI,upper.CI,label)
comp.all <- rbind(comps1, comp.freq.tmp) %>% dplyr::mutate_if(is.numeric, round, 3) %>%
arrange(label) %>% dplyr::mutate(CI.width = upper.CI - lower.CI)
rownames(comp.all)=c(1:nrow(comp.all))
comp.all <- comp.all %>% dplyr::mutate(relative.CI.width = CI.width/CI.width[comp.all$label=="No borrowing"])
comp.all
usethis::use_readme_rmd()
usethis::use_readme_md()
usethis::use_pkgdown()
install.packages("pkgdown")
usethis::use_pkgdown()
devtools::check()
devtools::check()
library(AugRCT)
library(AugRCT)
library(AugRCT)
library(AugRCT)
library(AugRCT)
load("AugRCT.Rproj")
library(AugRCT)
devtools::document()
devtools::document()
devtools::document()
library(AugRCT)
usethis::use_pkgdown()
library(AugRCT)
