method.label <- method.labels[[i]]
rmarkdown::render(paste0(root.path, "Simulation Results\\RMarkdown Subgroup Comparison.Rmd"),
output_file = paste(Dir.name, "_", Sys.Date(), ".html",sep=""),
output_dir = paste0(root.path, "Simulation Results\\"))
}
View(dt.all1)
i=1
Dir.name <- Dir.names[[i]]
dt.all <- dts[[i]]
method.level <- method.levels[[i]]
method.label <- method.labels[[i]]
RD.bound <- 0
comps.all <- dt.all %>% dplyr::mutate(true.par = true.delta) %>%
dplyr::mutate(cov.ind = 1*((true.par >= lower.CI) & (true.par <= upper.CI)), Power.ind = 1*(lower.CI > RD.bound), Bias.ind = point.est - true.par, CI.width = upper.CI - lower.CI)
summ <- comps.all  %>% dplyr::filter(is.na(point.est)==0) %>% dplyr::group_by(set.num, label, data.source, unm.confs,lambdas) %>%
dplyr::summarise(nsim = n(), Bias = round(mean(Bias.ind),3), Coverage = round(100*mean(cov.ind),2),
Emp.SD = round(sd(point.est),3), Emp.MSE = round(sqrt(sum(Bias.ind^2)/(nsim-1)),3),Emp.MSE2 = round(sum(Bias.ind^2)/(nsim-1),3),
CI.width.mean = round(mean(CI.width),2), Power = round(mean(Power.ind),4))
ref.MSE2 <- summ %>% dplyr::filter(label == "No borrowing") %>% dplyr::mutate(ref.Emp.MSE2 = Emp.MSE2) %>% dplyr::select(set.num, ref.Emp.MSE2)
summ <- merge(summ, ref.MSE2[,c("set.num","ref.Emp.MSE2")], by="set.num") %>% dplyr::mutate(MSE.Ratio = Emp.MSE2/ref.Emp.MSE2)
#Standard deviation is used to measure the spread of data around the mean, while RMSE is used to measure distance between the true value and the predicted values. RMSE is generally used to measure the error of prediction, i.e. how much the predictions you made differ from the predicted data.
# generate figure
summ.long.0 <- summ %>% tidyr::gather(quantity, value, nsim, Bias, Coverage, Emp.SD, Emp.MSE, CI.width.mean, Power,MSE.Ratio)
summ.long.0$quantity[summ.long.0$lambdas==0 & summ.long.0$quantity=="Power"] <- "Type I error"
summ.long.0 <- summ.long.0 %>%
dplyr::mutate(set.num=factor(set.num),
label.new=factor(label, levels=method.levels,
labels=method.labels),
unm.confs.ind = factor(unm.confs, levels= 1:2, labels=c("1. No","2. Yes")))
n.sim = 200
cols = c("goldenrod1","gold3","olivedrab3","seagreen","springgreen3","#56B4E9","#0072B2","deepskyblue3")
#cols = c("#999999","#333333","#FF9966","#E69F00","#D55E00","#56B4E9","#009E73","#0072B2")
# "#CC79A7", "#FFCC99"
summ.longs <- list(summ.long.0 %>% dplyr::filter(unm.confs == 1) , # remove results with unmeasured confounding
summ.long.0 ) #add unmeasured confounding
fig.path = paste0(root.path, "Simulation Results\\Figure\\", Dir.name, "\\")
dir.create(fig.path)
for (i in 1:2){
summ.long <- summ.longs[[i]]
summ.long.withtrt <-  summ.long %>% dplyr::filter(lambdas==1.185)
summ.long.notrt <-  summ.long %>% dplyr::filter(lambdas==0)
fig.dt <- summ.long.withtrt
p <- plot.simu(fig.dt = fig.dt,
fig.title = paste0("Figure ",1+(i-1)*6, ": With Treatment Effect"),
quants = c("Bias","Power"),
ref.quants = c("Bias","Power"),
ref.locs = c(0,0.8),
ref.labels = c(0,0.8),
cols = cols,
facet.row = "quantity",
facet.col = ".",
fig.path = fig.path)
p <- plot.simu(fig.dt = fig.dt,
fig.title = paste0("Figure ",2+(i-1)*6, ": With Treatment Effect"),
quants = c("Coverage","CI.width.mean"),
ref.quants = c("Coverage","Coverage"),
ref.locs = c(100*(0.95-1.96*sqrt(0.05*(1-0.05)/n.sim)), 100*0.95),
ref.labels = c(round(100*(0.95-1.96*sqrt(0.05*(1-0.05)/n.sim)),1), round(100*0.95,1)),
cols = cols,
facet.row = "quantity",
facet.col = ".",
fig.path = fig.path)
p <- plot.simu(fig.dt = fig.dt,
fig.title = paste0("Figure ",3+(i-1)*6, ": With Treatment Effect"),
quants = c("MSE.Ratio"),
ref.quants = c("MSE.Ratio"),
ref.locs = 1,
ref.labels = 1,
cols = cols,
facet.row = "quantity",
facet.col = ".",
fig.height = 5,
fig.path = fig.path)
fig.dt <- summ.long.notrt
p <- plot.simu(fig.dt = fig.dt,
fig.title = paste0("Figure ",4+(i-1)*6, ": No Treatment Effect"),
quants = c("Bias","Type I error"),
ref.quants = c("Bias","Type I error"),
ref.locs = c(0,0.025),
ref.labels = c("0",".025"),
cols = cols,
facet.row = "quantity",
facet.col = ".",
fig.path = fig.path)
p <- plot.simu(fig.dt = fig.dt,
fig.title = paste0("Figure ",4+(i-1)*6, ".1: No Treatment Effect"),
quants = c("Type I error"),
ref.quants = c("Type I error"),
ref.locs = 0.025,
ref.labels = ".025",
cols = cols,
facet.row = "quantity",
facet.col = ".",
fig.height = 5,
fig.path = fig.path,
log_10 = TRUE)
p <- plot.simu(fig.dt = fig.dt,
fig.title = paste0("Figure ",5+(i-1)*6, ": No Treatment Effect"),
quants = c("Coverage","CI.width.mean"),
ref.quants = c("Coverage","Coverage"),
ref.locs = c(100*(0.95-1.96*sqrt(0.05*(1-0.05)/n.sim)), 100*0.95),
ref.labels = c(round(100*(0.95-1.96*sqrt(0.05*(1-0.05)/n.sim)),1), round(100*0.95,1)),
cols = cols,
facet.row = "quantity",
facet.col = ".",
fig.path = fig.path)
p <- plot.simu(fig.dt = fig.dt,
fig.title = paste0("Figure ",6+(i-1)*6, ": No Treatment Effect"),
quants = c("MSE.Ratio"),
ref.quants = c("MSE.Ratio"),
ref.locs = 1,
ref.labels = 1,
cols = cols,
facet.row = "quantity",
facet.col = ".",
fig.path = fig.path,
fig.height = 5)
}
View(summ.long.0)
library(knitr)
library(markdown)
library(rmarkdown)
#--------------------------------------------------------
# Step 1: Prepare Clean data
load(file = paste0(root.path,"Simulation results\\R Data\\simu_true_theta1.RData")) #unm.conf.inds, data.source.mx, simu.true
load(file = paste0(root.path,"Simulation results\\R Data\\theta1_freq_diff_0719.RData"))
comps.freq.add <- comps.freq %>% dplyr::filter(label=="No borrowing")
load(file = paste0(root.path,"Simulation results\\R Data\\IPTW_trim_0729.RData"))
comps.freq <- rbind(comps.freq.add, comps.freq)
comps.freq$set.num <- as.character(comps.freq$set.num)
comps.freq <- merge(comps.freq, simu.true, by="set.num")
#comps$set.num <- as.character(comps$set.num)
#comps <- merge(comps, simu.true, by="set.num")
# generate table
#comps <- comps %>% dplyr::mutate(point.est = mean, lower.CI = X2.5., upper.CI = X97.5.,label = fit) %>%
#  dplyr::select(point.est,lower.CI,upper.CI,label,sim,
#                set.num, data.source, unm.confs, lambdas, true.thetaE, true.thetaCD,true.thetaCH, data.source.diff,true.delta)
dt.all1 <- rbind(comps.freq)
method.levels1 <- c("perc","perc (CV=4)","perc (CV=5)","perc (CV=6)","perc (CV=7)",
"org","org (CV=4)","org (CV=5)","org (CV=6)","org (CV=7)")
method.labels1 <- c("perc","perc (CV=4)","perc (CV=5)","perc (CV=6)","perc (CV=7)",
"org","org (CV=4)","org (CV=5)","org (CV=6)","org (CV=7)")
#--------------------------------------------------------
# step 2: knitr loop
root.path <- "C:\\Users\\wangxi8\\OneDrive - Merck Sharp & Dohme, Corp\\AugRCT_new\\"
dts <- list(dt.all1)
method.levels <- list(method.levels1)
method.labels <- list(method.labels1)
Dir.names <- list("IPTW")
for (i in 1){
Dir.name <- Dir.names[[i]]
dt.all <- dts[[i]]
method.level <- method.levels[[i]]
method.label <- method.labels[[i]]
rmarkdown::render(paste0(root.path, "Simulation Results\\RMarkdown Subgroup Comparison.Rmd"),
output_file = paste(Dir.name, "_", Sys.Date(), ".html",sep=""),
output_dir = paste0(root.path, "Simulation Results\\"))
}
library(knitr)
library(markdown)
library(rmarkdown)
#--------------------------------------------------------
# Step 1: Prepare Clean data
root.path <- "C:\\Users\\wangxi8\\OneDrive - Merck Sharp & Dohme, Corp\\AugRCT_new\\"
load(file = paste0(root.path,"Simulation results\\R Data\\simu_true_theta1.RData")) #unm.conf.inds, data.source.mx, simu.true
load(file = paste0(root.path,"Simulation results\\R Data\\theta1_freq_diff_0719.RData"))
comps.freq.add <- comps.freq %>% dplyr::filter(label=="No borrowing")
load(file = paste0(root.path,"Simulation results\\R Data\\IPTW_trim_0729.RData"))
comps.freq <- rbind(comps.freq.add, comps.freq)
comps.freq$set.num <- as.character(comps.freq$set.num)
comps.freq <- merge(comps.freq, simu.true, by="set.num")
#comps$set.num <- as.character(comps$set.num)
#comps <- merge(comps, simu.true, by="set.num")
# generate table
#comps <- comps %>% dplyr::mutate(point.est = mean, lower.CI = X2.5., upper.CI = X97.5.,label = fit) %>%
#  dplyr::select(point.est,lower.CI,upper.CI,label,sim,
#                set.num, data.source, unm.confs, lambdas, true.thetaE, true.thetaCD,true.thetaCH, data.source.diff,true.delta)
dt.all1 <- rbind(comps.freq)
method.levels1 <- c("perc","perc (CV=4)","perc (CV=5)","perc (CV=6)","perc (CV=7)",
"org","org (CV=4)","org (CV=5)","org (CV=6)","org (CV=7)")
method.labels1 <- c("perc","perc (CV=4)","perc (CV=5)","perc (CV=6)","perc (CV=7)",
"org","org (CV=4)","org (CV=5)","org (CV=6)","org (CV=7)")
#--------------------------------------------------------
# step 2: knitr loop
dts <- list(dt.all1)
method.levels <- list(method.levels1)
method.labels <- list(method.labels1)
Dir.names <- list("IPTW")
for (i in 1){
Dir.name <- Dir.names[[i]]
dt.all <- dts[[i]]
method.level <- method.levels[[i]]
method.label <- method.labels[[i]]
rmarkdown::render(paste0(root.path, "Simulation Results\\RMarkdown Subgroup Comparison.Rmd"),
output_file = paste(Dir.name, "_", Sys.Date(), ".html",sep=""),
output_dir = paste0(root.path, "Simulation Results\\"))
}
format(Sys.Date(),format="%m%d%Y")
for (i in 1){
Dir.name <- Dir.names[[i]]
dt.all <- dts[[i]]
method.level <- method.levels[[i]]
method.label <- method.labels[[i]]
rmarkdown::render(paste0(root.path, "Simulation Results\\RMarkdown Subgroup Comparison.Rmd"),
output_file = paste(Dir.name, "_", format(Sys.Date(),format="%m%d%Y"), ".html",sep=""),
output_dir = paste0(root.path, "Simulation Results\\"))
}
method.levels1 <- c("perc","perc (CV=4)","perc (CV=5)","perc (CV=6)","perc (CV=7)",
"org","org (CV=4)","org (CV=5)","org (CV=6)","org (CV=7)","No borrowing")
method.labels1 <- c("perc","perc (CV=4)","perc (CV=5)","perc (CV=6)","perc (CV=7)",
"org","org (CV=4)","org (CV=5)","org (CV=6)","org (CV=7)","No borrowing")
#--------------------------------------------------------
# step 2: knitr loop
dts <- list(dt.all1)
method.levels <- list(method.levels1)
method.labels <- list(method.labels1)
Dir.names <- list("IPTW")
for (i in 1){
Dir.name <- Dir.names[[i]]
dt.all <- dts[[i]]
method.level <- method.levels[[i]]
method.label <- method.labels[[i]]
rmarkdown::render(paste0(root.path, "Simulation Results\\RMarkdown Subgroup Comparison.Rmd"),
output_file = paste(Dir.name, "_", format(Sys.Date(),format="%m%d%Y"), ".html",sep=""),
output_dir = paste0(root.path, "Simulation Results\\"))
}
dts <- list(dt.all1)
method.levels <- list(method.levels1)
method.labels <- list(method.labels1)
Dir.names <- list("IPTW")
for (i in 1){
Dir.name <- Dir.names[[i]]
dt.all <- dts[[i]]
method.level <- method.levels[[i]]
method.label <- method.labels[[i]]
rmarkdown::render(paste0(root.path, "Simulation Results\\RMarkdown Subgroup Comparison.Rmd"),
output_file = paste(Dir.name, "_", format(Sys.Date(),format="%m%d%Y"), ".html",sep=""),
output_dir = paste0(root.path, "Simulation Results\\"))
}
method.levels2 <- c("alpha1 beta0.1","alpha1 beta1","alpha1 beta0.01","alpha1 beta0.001"
,"alpha0.1 beta0.1","alpha0.01 beta0.01","alpha0.001 beta0.001","No borrowing")
method.labels2 <- c("alpha1 beta0.1","alpha1 beta1","alpha1 beta0.01","alpha1 beta0.001"
,"alpha0.1 beta0.1","alpha0.01 beta0.01","alpha0.001 beta0.001","No borrowing")
# Step 1: Prepare Clean data
root.path <- "C:\\Users\\wangxi8\\OneDrive - Merck Sharp & Dohme, Corp\\AugRCT_new\\"
load(file = paste0(root.path,"Simulation results\\R Data\\simu_true_theta1.RData")) #unm.conf.inds, data.source.mx, simu.true
load(file = paste0(root.path,"Simulation results\\R Data\\theta1_freq_diff_0719.RData"))
comps.freq<- comps.freq %>% dplyr::filter(label=="No borrowing")
comps.freq$set.num <- as.character(comps.freq$set.num)
comps.freq <- merge(comps.freq, simu.true, by="set.num")
load(file = paste0(root.path,"Simulation results\\R Data\\theta1_model5_stan_RD_0729.RData"))
comps$set.num <- as.character(comps$set.num)
comps <- merge(comps, simu.true, by="set.num")
# generate table
comps <- comps %>% dplyr::mutate(point.est = mean, lower.CI = X2.5., upper.CI = X97.5.,label = fit) %>%
dplyr::select(point.est,lower.CI,upper.CI,label,sim,
set.num, data.source, unm.confs, lambdas, true.thetaE, true.thetaCD,true.thetaCH, data.source.diff,true.delta)
dt.all2 <- rbind(comps.freq, comps)
method.levels2 <- c("alpha1 beta0.1","alpha1 beta1","alpha1 beta0.01","alpha1 beta0.001"
,"alpha0.1 beta0.1","alpha0.01 beta0.01","alpha0.001 beta0.001","No borrowing")
method.labels2 <- c("alpha1 beta0.1","alpha1 beta1","alpha1 beta0.01","alpha1 beta0.001"
,"alpha0.1 beta0.1","alpha0.01 beta0.01","alpha0.001 beta0.001","No borrowing")
dts <- list(dt.all2)
method.levels <- list(method.levels2)
method.labels <- list(method.labels2)
Dir.names <- list("Model 5 Prior")
#--------------------------------------------------------
# step 2: knitr loop
for (i in 1){
Dir.name <- Dir.names[[i]]
dt.all <- dts[[i]]
method.level <- method.levels[[i]]
method.label <- method.labels[[i]]
rmarkdown::render(paste0(root.path, "Simulation Results\\RMarkdown Subgroup Comparison.Rmd"),
output_file = paste(Dir.name, "_", format(Sys.Date(),format="%m%d%Y"), ".html",sep=""),
output_dir = paste0(root.path, "Simulation Results\\"))
}
library(stringr)
# load R functions
root.path <- "C:\\Users\\wangxi8\\OneDrive - Merck Sharp & Dohme, Corp\\AugRCT_new\\"
code.path <- paste0(root.path,"R\\")
source(paste0(code.path,"RFunctions.R"))
# imported from rwe package for stratification + power prior approaches
source(paste0(code.path,"rwe_functions.R"))
options(mc.cores=parallel::detectCores()) #In HPC server, DO NOT run this line of code
rstan_options(auto_write = TRUE) #tell stan not to compile code that has already been compiled
path <- paste0(root.path,"stan_covariate\\")
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2.stan"))
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2.stan"))
root.path <- "C:\\Users\\wangxi8\\OneDrive - Merck Sharp & Dohme, Corp\\AugRCT_new\\"
code.path <- paste0(root.path,"R\\")
source(paste0(code.path,"RFunctions.R"))
source(paste0(code.path,"RFunctions_RD.R"))
source(paste0(code.path,"RFunctions_OR.R"))
# imported from rwe package for stratification + power prior approaches
source(paste0(code.path,"rwe_functions.R"))
seed.init = 2020; n.sim = 200;
n.E = 80; n.CD = 40; n.CH = 300;
lambda=1.19;xi=0;
x1.mean.ECD=40;x1.mean.CH=40;x2.p.ECD=0.4;x2.p.CH=0.4;
beta0=3.6;beta1=-0.1;beta2=-0.5;beta3=1;beta4=-1;nstrata = 3;
m2.iter = 10000; m2.adapt_delta=0.99; m2.max_treedepth = 12;
m4.iter = 10000; m4.adapt_delta=0.95;
m5.iter = 10000; m5.adapt_delta=0.95
# this function is used to perform a simulation comparing the 11 methods
# seed.init is used to generate the seeds
# n.sim is number of datasets for simulation
# filename is the name of the file to save the simulaiton results
# res.path is the path of the file to save the simulaiton results
start=Sys.time()
set.seed(seed.init)
comps <- NULL
comps.freq <- NULL
seeds <- as.integer(rnorm(n.sim,0,1000))
#for (sim in 1:n.sim){
sim=2
seed <- seeds[sim]
print(seed)
mydata <- generate.data(seed=seed,n.E=n.E,n.CD=n.CD,n.CH=n.CH,lambda=lambda,xi=xi,
x1.mean.ECD=x1.mean.ECD,x1.mean.CH=x1.mean.CH,
x2.p.ECD=x2.p.ECD,x2.p.CH=x2.p.CH,
beta0=beta0,beta1=beta1,beta2=beta2,beta3=beta3,beta4=beta4)
# get sample.theta.E, sample.theta.CD, sample.theta.CH.
mydata.ps <- add.ps(data=mydata,ps.covs=c("x1","x2","x3","x4"))
mydata <- mydata.ps$data.ps
ps.covs=c("x1","x2","x3","x4")
X = data.frame(1, ds[,c("Z", "D",ps.covs)])
PS.distance <- match_on(D ~ est.PS, method="euclidean",data=mydata)
pairmatch <- pairmatch(PS.distance, data=mydata)
#Generate Matched dataset. randomly select n.E - n.CD from n.E matched subjects
mydata1 <- data.frame(mydata, matches = pairmatch, check.rows=T)
#table(!is.na(mydata1$matches),mydata1$group)
pm.mydata <- mydata1 %>% dplyr::filter(group=="CD" | (!is.na(matches))) %>%
dplyr::mutate(keep=ifelse(group %in% c("E","CD"),1,
sample(c(rep(0,n.CD*2),rep(1,n.E - n.CD)),replace=FALSE))) %>%
dplyr::filter(keep==1)
ds <- pm.mydata %>% arrange(CH.ind) #order: E CD CH
X = data.frame(1, ds[,c("Z", "D",ps.covs)])
View(X)
data <- list(NECD = n.CD+n.E,N = n.E*2,NC = n.E,NCH = n.E-n.CD,
a0 = ds$est.PS, Y = ds$Y, X = X, K = dim(X)[2])
fit.2 <- rweSTAN(lst.data = data, model = model.2,iter = m2.iter,control = list(adapt_delta=m2.adapt_delta,max_treedepth = m2.max_treedepth))
fit.2
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2.stan"))
fit.2 <- rweSTAN(lst.data = data, model = model.2,iter = m2.iter,control = list(adapt_delta=m2.adapt_delta,max_treedepth = m2.max_treedepth))
# Matching + Fixed power prior. Bayes model 2. theta ~ Beta(k*mu, k*(1-mu))
model.2 <- stan_model(paste0(path, "model2.stan"))
fit.2 <- rweSTAN(lst.data = data, model = model.2,iter = m2.iter,control = list(adapt_delta=m2.adapt_delta,max_treedepth = m2.max_treedepth))
ds <- pm.mydata %>% arrange(CH.ind) #order: E CD CH
X = data.frame(1, ds[,c("Z", "D",ps.covs)])
data <- list(NECD=n.CD+n.E,N=n.E*2,
a0=ds$est.PS, Y=ds$Y, X = X, K = dim(X)[2])
fit.1 <- rweSTAN(lst.data = data, model = model.1)
# Matching + Fixed power prior. Bayes model 1. logit(theta) =beta0 + lambda*Z
model.1 <- stan_model(paste0(path, "model1.stan"))
ds <- pm.mydata %>% arrange(CH.ind) #order: E CD CH
X = data.frame(1, ds[,c("Z", "D",ps.covs)])
data <- list(NECD=n.CD+n.E,N=n.E*2,
a0=ds$est.PS, Y=ds$Y, X = X, K = dim(X)[2])
fit.1 <- rweSTAN(lst.data = data, model = model.1)
fit.1
knitr::opts_chunk$set(echo = TRUE)
load(file=paste0(root.path,"Real data application\\RealData_RD_07292020.RData"))
comps.all[[1]]$label
load(file=paste0(root.path,"Real data application\\RealData_RD_07292020.RData"))
for (i in 1: length(comps.all)){
comps.all[[i]] <- comps.all[[i]] %>%
dplyr::filter(! label %in% c("IPTW trim (CV=5)","IPTW trim (CV=6)","IPTW trim (CV=7)","IPTW trim (CV=4)","IPTW trim (org)", "IPTW trim (CV=5, org)","PS stratification (trim, weighted by var)","PS stratification (Delta)","PS stratification (Delta,weighted by var)" , "PS stratification (trim)","Stratification + fixed Power Prior","matching + power prior (Bayes model 1)")) %>%
dplyr::mutate(label.new=ifelse(label=="matching + power prior (Bayes model 1)","matching + power prior",
ifelse(label=="Stratification + random Power Prior","Stratification + Power Prior",label)))
}
kableone(comps.all[[1]])
load(file=paste0(root.path,"Real data application\\RealData_RD_07292020.RData"))
for (i in 1: length(comps.all)){
comps.all[[i]] <- comps.all[[i]] %>%
dplyr::filter(! label %in% c("IPTW trim (CV=5)","IPTW trim (CV=6)","IPTW trim (CV=7)","IPTW trim (CV=4)","IPTW trim (org)", "IPTW trim (CV=5, org)","PS stratification (trim, weighted by var)","PS stratification (Delta)","PS stratification (Delta,weighted by var)" , "PS stratification (trim)","Stratification + fixed Power Prior","matching + power prior (Bayes model 1)")) %>%
dplyr::mutate(label.new=ifelse(label=="matching + power prior (Bayes model 2)","Matching + power prior",
ifelse(label=="Stratification + random Power Prior","Stratification + Power Prior",label)))
}
kableone(comps.all[[1]])
load(file=paste0(root.path,"Real data application\\RealData_RD_07292020.RData"))
for (i in 1: length(comps.all)){
comps.all[[i]] <- comps.all[[i]] %>%
dplyr::filter(! label %in% c("IPTW","IPTW trim (CV=5)","IPTW trim (CV=6)","IPTW trim (CV=7)","IPTW trim (CV=4)","IPTW trim (org)", "IPTW trim (CV=5, org)","PS stratification (trim, weighted by var)","PS stratification (Delta)","PS stratification (Delta,weighted by var)" , "PS stratification (trim)","Stratification + fixed Power Prior","matching + power prior (Bayes model 1)")) %>%
dplyr::mutate(label.new=ifelse(label=="matching + power prior (Bayes model 2)","Matching + power prior",
ifelse(label=="Stratification + random Power Prior","Stratification + Power Prior",label)))
}
kableone(comps.all[[1]])
comps.all[[i]] <- comps.all[[i]] %>%
dplyr::filter(! label %in% c("IPTW","IPTW trim (CV=5)","IPTW trim (CV=6)","IPTW trim (CV=7)","IPTW trim (CV=4)","IPTW trim (org)", "IPTW trim (CV=5, org)","PS stratification (trim, weighted by var)","PS stratification (Delta)","PS stratification (Delta,weighted by var)" , "PS stratification (trim)","Stratification + fixed Power Prior","matching + power prior (Bayes model 1)")) %>%
dplyr::mutate(label.new=ifelse(label=="matching + power prior (Bayes model 2)","Matching + power prior",
ifelse(label=="Stratification + random Power Prior","Stratification + Power Prior",label(label))))
labels(comps.all[[i]])
labels(comps.all[[i]]$label)
load(file=paste0(root.path,"Real data application\\RealData_RD_07292020.RData"))
for (i in 1: length(comps.all)){
comps.all[[i]] <- comps.all[[i]] %>%
dplyr::filter(! label %in% c("IPTW","IPTW trim (CV=5)","IPTW trim (CV=6)","IPTW trim (CV=7)","IPTW trim (CV=4)","IPTW trim (org)", "IPTW trim (CV=5, org)","PS stratification (trim, weighted by var)","PS stratification (Delta)","PS stratification (Delta,weighted by var)" , "PS stratification (trim)","Stratification + fixed Power Prior","matching + power prior (Bayes model 1)")) %>%
dplyr::mutate(label.new=ifelse(label=="matching + power prior (Bayes model 2)","Matching + power prior",
ifelse(label=="Stratification + random Power Prior","Stratification + Power Prior",label(label))))
labels(comps.all[[i]]$label)
}
load(file=paste0(root.path,"Real data application\\RealData_RD_07292020.RData"))
levels(comps.all[[1]]$label)
labels <-
remove.levels <- c("IPTW","IPTW trim (CV=5)","IPTW trim (CV=6)","IPTW trim (CV=7)","IPTW trim (CV=4)","IPTW trim","IPTW trim (CV=5, org)","PS stratification (trim, weighted by var)","PS stratification (Delta)","PS stratification (Delta,weighted by var)" , "PS stratification (trim)","Stratification + fixed Power Prior","matching + power prior (Bayes model 1)")
levels(comps.all[[1]]$label)[-remove.levels]
remove.levels <- c("IPTW","IPTW trim (CV=5)","IPTW trim (CV=6)","IPTW trim (CV=7)","IPTW trim (CV=4)","IPTW trim","IPTW trim (CV=5, org)","PS stratification (trim, weighted by var)","PS stratification (Delta)","PS stratification (Delta,weighted by var)" , "PS stratification (trim)","Stratification + fixed Power Prior","matching + power prior (Bayes model 1)")
levels(comps.all[[1]]$label)[-remove.levels]
a <-  levels(comps.all[[1]]$label)
a[-which(a %in% remove.levels)]
load(file=paste0(root.path,"Real data application\\RealData_RD_07292020.RData"))
remove.levels <- c("IPTW","IPTW trim (CV=5)","IPTW trim (CV=6)","IPTW trim (CV=7)","IPTW trim (CV=4)","IPTW trim","IPTW trim (CV=5, org)","PS stratification (trim, weighted by var)","PS stratification (Delta)","PS stratification (Delta,weighted by var)" , "PS stratification (trim)","Stratification + fixed Power Prior","matching + power prior (Bayes model 1)")
levels <- levels(comps.all[[1]]$label)[-which(a %in% remove.levels)]
labels <- c("Matching + power prior", "Matching + Commensurate prior","Stratification + Power Prior",
"Stratification + commensurate prior","Matching","Pool",
"No borrowing", "IPTW trim", "PS stratification")
for (i in 1: length(comps.all)){
comps.all[[i]] <- comps.all[[i]] %>%
dplyr::filter(! label %in% remove.levels) %>%
dplyr::mutate(label.new=factor(label, levels = levels, labels = labels))
}
kableone(comps.all[[1]])
# relative CI width (with no borrowing as reference)
forestplot(labeltext=c(as.character(comps.all[[1]]$label.new)),
mean=c(comps.all[[1]]$relative.CI.width),
lower=c(comps.all[[1]]$relative.CI.width),
upper=c(comps.all[[1]]$relative.CI.width),
zero=1.00,
line.margin = .05,
hrzl_lines = list("5"=gpar(lty=2)),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
txt_gp = fpTxtGp(ticks=gpar(cex=1),xlab=gpar(cex=1.0)), #change font size. label, summary, xlab, title, ticks and legend.
xticks = seq(from=0.4,to=1,by=0.2),
xlab="Relative CI Width \n (ref: No borrowing)")
paste0(root.path, "Real data application\\Figure\\","RD_Estimate.png")
knitr::include_graphics(paste0(root.path, "Real data application\\Figure\\","RD_Estimate.png"))
root.path <- "C:\\Users\\wangxi8\\OneDrive - Merck Sharp & Dohme, Corp\\AugRCT_new\\"
code.path <- paste0(root.path,"R\\")
source(paste0(code.path,"RFunctions.R"))
# imported from rwe package for stratification + power prior approaches
source(paste0(code.path,"rwe_functions.R"))
source(paste0(code.path,"RealDataRFunctions.R"))
dt <- data.frame(read_csv(paste0(root.path, "\\Real data application\\analy_rct_external_ctrl_orr_23July2020.csv")))
#View(dt)
#str(dt)
#table(dt$datasource,dt$trt,useNA = "ifany")
#table(dt$response,useNA = "ifany") #67 missing
contVars <- c("AGE", "WEIGHTBL", "BASETMR") #"PDL1TPS",
binVars <- c("Male","White", "PRAD_ind","EastAsia","PDL1TPS_50", "BSECOG", "CARBOPLATIN","Smoker")
vars.all <- c(binVars,contVars)
dt <- dt %>% dplyr::mutate(group=ifelse(datasource=="RCT" & trt=="Test", "E",
ifelse(datasource=="RCT" & trt=="Control", "CD",
ifelse(datasource=="Historical" & trt=="Control", "CH",NA))),
D=1*(datasource=="RCT"),
Z=1*(trt=="Test"),
Male=1*(SEX=="M"),
White=ifelse(is.na(RACE), NA, ifelse(RACE=="WHITE", 1,0)),
PRAD_ind=1*(PRAD=="Yes"),
EastAsia=1*(REGEA=="East Asia"),
PDL1TPS_50=1*(PDL1TPS>=50),
PDL1TPS_1=1*(PDL1TPS>=1),
STRATUMI=ifelse(is.na(STRATUMI),"CARBOPLATIN" ,STRATUMI),
Smoker=1*(SMOKER %in% c("Current","Former"))) %>%
dplyr::select(-RACE,-datasource, -trt)
library(stringr)
dt$CARBOPLATIN <- 1* (str_detect(dt$STRATUMI, "CARBOPLATIN"))
miss.pattern <- data.frame(md.pattern(dt,plot=FALSE)[,17:21])
miss.pattern$N <- c(rownames(miss.pattern)[-7],sum(as.numeric(rownames(miss.pattern)), na.rm = T))
rownames(miss.pattern) <- c(paste0("Pattern ",c(1:6)),"Total")
kableone(miss.pattern)
#impute missing
dt <- dt %>% dplyr::mutate(response=ifelse(is.na(response),0,response))
complete.dt <- NULL
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
for (i in c("E","CD","CH")){
dt.temp <- dt %>% dplyr::filter(group==i)
#impute with median (WEIGHTBL BASETMR)
med.WEIGHTBL=median(dt.temp$WEIGHTBL,na.rm = T);med.BASETMR=median(dt.temp$BASETMR,na.rm = T)
#impute with mode (BSECOG White)
mode.BSECOG=Mode(dt.temp$BSECOG);mode.White=Mode(dt.temp$White)
dt.temp <- dt.temp %>% dplyr::mutate(White=ifelse(is.na(White),mode.White,White),BSECOG=ifelse(is.na(BSECOG),mode.BSECOG,BSECOG),
WEIGHTBL=ifelse(is.na(WEIGHTBL),med.WEIGHTBL,WEIGHTBL),
BASETMR=ifelse(is.na(BASETMR),med.BASETMR,BASETMR))
complete.dt <- rbind(complete.dt,dt.temp)
}
complete.dt$group <- factor(complete.dt$group)
table <- CreateTableOne(vars = c(vars.all),data = complete.dt, strata="group",factorVars = c(binVars))
table
View(table)
table$MetaData
table$ContTable
aa <- table$ContTable
bb <- table$CatTable
View(aa)
data.frame(aa)
data.frame(cbindlist(aa))
root.path <- "C:\\Users\\wangxi8\\OneDrive - Merck Sharp & Dohme, Corp\\AugRCT_new\\"
code.path <- paste0(root.path,"R\\")
source(paste0(code.path,"RFunctions.R"))
# imported from rwe package for stratification + power prior approaches
source(paste0(code.path,"rwe_functions.R"))
source(paste0(code.path,"RealDataRFunctions.R"))
aa$CD
print(table)
